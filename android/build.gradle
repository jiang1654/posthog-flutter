group 'com.posthog.posthog_flutter'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.8.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.posthog.posthog_flutter'
    }

    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        languageVersion = "1.6"
        apiVersion = "1.6"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 21
    }


     String moudleDir = ""
// 获取当前moudle的dir
rootProject.allprojects { project ->
    try {
        // 这里的flutter_bdface_collect是flutter的约定, 插件的module名是插件名, :是gradle的约定. project前加:
        if (project.properties.get("identityPath").toString() == ":posthog_flutter") {
            moudleDir = project.properties.get("projectDir").toString()
        }
    } catch (e) {
    }
}
rootProject.allprojects {
    // 这个闭包是循环所有project, 我们让这个仓库可以被所有module找到
    repositories {
        google()
        jcenter()
        // 添加这个指向本地的仓库目录
        maven { url "$moudleDir/libs" }
    }
}

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'
        implementation 'com.posthog:posthog-android:3.5.1'
     }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}

